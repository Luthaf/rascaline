
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/property-selection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_property-selection.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_property-selection.py:


Property Selection
==================

.. start-body

.. GENERATED FROM PYTHON SOURCE LINES 7-16

.. code-block:: Python


    import chemfiles
    import numpy as np
    from metatensor import Labels, MetatensorError, TensorBlock, TensorMap
    from skmatter.feature_selection import FPS

    from featomic import SoapPowerSpectrum









.. GENERATED FROM PYTHON SOURCE LINES 17-18

First we load the dataset with chemfiles

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    with chemfiles.Trajectory("dataset.xyz") as trajectory:
        frames = [f for f in trajectory]








.. GENERATED FROM PYTHON SOURCE LINES 24-25

and define the hyper parameters of the representation

.. GENERATED FROM PYTHON SOURCE LINES 26-47

.. code-block:: Python


    HYPER_PARAMETERS = {
        "cutoff": {
            "radius": 5.0,
            "smoothing": {"type": "ShiftedCosine", "width": 0.5},
        },
        "density": {
            "type": "Gaussian",
            "width": 0.3,
        },
        "basis": {
            "type": "TensorProduct",
            "max_angular": 4,
            "radial": {"type": "Gto", "max_radial": 6},
        },
    }

    calculator = SoapPowerSpectrum(**HYPER_PARAMETERS)

    descriptor = calculator.compute(frames)








.. GENERATED FROM PYTHON SOURCE LINES 48-51

The selections for feature can be a set of ``Labels``, in which case the names
of the labels must be a subset of the names of the properties produced by the
calculator. You can see the default set of names with:

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    print("property names:", descriptor.property_names)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    property names: ['l', 'n_1', 'n_2']




.. GENERATED FROM PYTHON SOURCE LINES 56-59

We can use a subset of these names to define a selection. In this case, only
properties matching the labels in this selection will be used by featomic
(here, only properties with ``l = 0`` will be used)

.. GENERATED FROM PYTHON SOURCE LINES 60-74

.. code-block:: Python


    selection = Labels(
        names=["l"],
        values=np.array([[0]]),
    )
    selected_descriptor = calculator.compute(frames, selected_properties=selection)

    selected_descriptor = selected_descriptor.keys_to_samples("center_type")
    selected_descriptor = selected_descriptor.keys_to_properties(
        ["neighbor_1_type", "neighbor_2_type"]
    )

    properties = selected_descriptor.block().properties








.. GENERATED FROM PYTHON SOURCE LINES 75-76

We expect to get `[0]` as the list of `l` properties

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: Python


    print(f"we have the following angular components: {np.unique(properties['l'])}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    we have the following angular components: [0]




.. GENERATED FROM PYTHON SOURCE LINES 81-84

The previous selection method uses the same selection for all blocks. If you
can to use different selection for different blocks, you should use a
``TensorMap`` to create your selection

.. GENERATED FROM PYTHON SOURCE LINES 85-91

.. code-block:: Python


    selected_descriptor = calculator.compute(frames, selected_properties=selection)
    descriptor_for_comparison = calculator.compute(
        frames, selected_properties=selected_descriptor
    )








.. GENERATED FROM PYTHON SOURCE LINES 92-95

The descriptor had 180 properties stored in the first block, the
selected_descriptor had 36. So ``descriptor_for_comparison`` will also have 36
properties.

.. GENERATED FROM PYTHON SOURCE LINES 96-103

.. code-block:: Python

    print("shape of first block initially:", descriptor.block(0).values.shape)
    print("shape of first block of reference:", selected_descriptor.block(0).values.shape)
    print(
        "shape of first block after selection:",
        descriptor_for_comparison.block(0).values.shape,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    shape of first block initially: (420, 245)
    shape of first block of reference: (420, 49)
    shape of first block after selection: (420, 49)




.. GENERATED FROM PYTHON SOURCE LINES 104-110

The ``TensorMap`` format allows us to select different features within each
block, and then construct a general matrix of features. We can select the most
significant features using FPS, which selects features based on the distance
between them. The following code snippet selects the 10 most important
features in each block, then constructs a TensorMap containing this selection,
and calculates the final matrix of features for it.

.. GENERATED FROM PYTHON SOURCE LINES 111-142

.. code-block:: Python



    def fps_feature_selection(descriptor, n_to_select):
        """
        Select ``n_to_select`` features block by block in the ``descriptor``, using
        Farthest Point Sampling to do the selection; and return a ``TensorMap`` with
        the right structure to be used as properties selection with featomic calculators
        """
        blocks = []
        for block in descriptor:
            # create a separate FPS selector for each block
            fps = FPS(n_to_select=n_to_select)
            mask = fps.fit(block.values).get_support()
            selected_properties = Labels(
                names=block.properties.names,
                values=block.properties.values[mask],
            )
            # The only important data here is the properties, so we create empty
            # sets of samples and components.
            blocks.append(
                TensorBlock(
                    values=np.empty((1, len(selected_properties))),
                    samples=Labels.single(),
                    components=[],
                    properties=selected_properties,
                )
            )

        return TensorMap(descriptor.keys, blocks)









.. GENERATED FROM PYTHON SOURCE LINES 143-145

We can then apply this function to subselect according to the data contained
in a descriptor

.. GENERATED FROM PYTHON SOURCE LINES 146-149

.. code-block:: Python


    selection = fps_feature_selection(descriptor, n_to_select=10)








.. GENERATED FROM PYTHON SOURCE LINES 150-152

and use the selection with featomic, potentially running the calculation on a
different set of systems

.. GENERATED FROM PYTHON SOURCE LINES 153-156

.. code-block:: Python


    selected_descriptor = calculator.compute(frames, selected_properties=selection)








.. GENERATED FROM PYTHON SOURCE LINES 157-159

Note that in this case it is no longer possible to have a single feature
matrix, because each block will have its own properties.

.. GENERATED FROM PYTHON SOURCE LINES 160-166

.. code-block:: Python


    try:
        selected_descriptor.keys_to_samples("center_type")
    except MetatensorError as err:
        print(err)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    invalid parameter: can not move keys to samples if the blocks have different property labels




.. GENERATED FROM PYTHON SOURCE LINES 167-168

.. end-body


.. _sphx_glr_download_examples_property-selection.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: property-selection.ipynb <property-selection.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: property-selection.py <property-selection.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: property-selection.zip <property-selection.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
