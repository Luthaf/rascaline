
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/keys-selection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_keys-selection.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_keys-selection.py:


Keys Selection
==============

.. start-body

.. GENERATED FROM PYTHON SOURCE LINES 7-15

.. code-block:: Python


    import chemfiles
    import numpy as np
    from metatensor import Labels, TensorBlock, TensorMap

    from featomic import SoapPowerSpectrum









.. GENERATED FROM PYTHON SOURCE LINES 16-17

First we load the dataset with chemfiles

.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: Python


    with chemfiles.Trajectory("dataset.xyz") as trajectory:
        frames = [f for f in trajectory]








.. GENERATED FROM PYTHON SOURCE LINES 23-24

and define the hyper parameters of the representation

.. GENERATED FROM PYTHON SOURCE LINES 25-44

.. code-block:: Python


    HYPER_PARAMETERS = {
        "cutoff": {
            "radius": 5.0,
            "smoothing": {"type": "ShiftedCosine", "width": 0.5},
        },
        "density": {
            "type": "Gaussian",
            "width": 0.3,
        },
        "basis": {
            "type": "TensorProduct",
            "max_angular": 4,
            "radial": {"type": "Gto", "max_radial": 6},
        },
    }

    calculator = SoapPowerSpectrum(**HYPER_PARAMETERS)








.. GENERATED FROM PYTHON SOURCE LINES 45-47

The selections for keys should be a set of ``Labels``, with the names of the
keys being a subset of the names of the keys produced by the calculator.

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: Python


    descriptor = calculator.compute(frames)
    print("keys names:", descriptor.keys.names)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    keys names: ['center_type', 'neighbor_1_type', 'neighbor_2_type']




.. GENERATED FROM PYTHON SOURCE LINES 53-56

We can use these names to define a selection, and only blocks matching the
labels in this selection will be used by featomic. Here, only blocks with
keys ``[1,1,1]`` and ``[4,4,4]`` will be calculated.

.. GENERATED FROM PYTHON SOURCE LINES 57-64

.. code-block:: Python


    selection = Labels(
        names=["center_type", "neighbor_1_type", "neighbor_2_type"],
        values=np.array([[1, 1, 1], [4, 4, 4]], dtype=np.int32),
    )
    selected_descriptor = calculator.compute(frames, selected_keys=selection)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

We get a TensorMap with 2 blocks, corresponding to the requested keys

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: Python


    print(selected_descriptor.keys)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Labels(
        center_type  neighbor_1_type  neighbor_2_type
             1              1                1
             4              4                4
    )




.. GENERATED FROM PYTHON SOURCE LINES 71-73

The block for ``[1, 1, 1]`` will be exactly the same as the one in the full
``TensorMap``

.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: Python

    answer = np.array_equal(descriptor.block(0).values, selected_descriptor.block(0).values)
    print(f"Are the blocks 0 in the descriptor and selected_descriptor equal? {answer}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the blocks 0 in the descriptor and selected_descriptor equal? True




.. GENERATED FROM PYTHON SOURCE LINES 78-80

Since there is no block for ``[4, 4, 4]`` in the full ``TensorMap``, an empty
block with no samples and the default set of properties is generated

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: Python


    print(selected_descriptor.block(1).values.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (0, 245)




.. GENERATED FROM PYTHON SOURCE LINES 85-88

``selected_keys`` can be used simultaneously with samples and properties
selection. Here we define a selection for properties as a ``TensorMap`` to
select different properties for each block:

.. GENERATED FROM PYTHON SOURCE LINES 89-112

.. code-block:: Python


    selection = [
        Labels(names=["l", "n_1", "n_2"], values=np.array([[0, 0, 0]])),
        Labels(names=["l", "n_1", "n_2"], values=np.array([[1, 1, 1]])),
    ]
    blocks = []
    for entries in selection:
        blocks.append(
            TensorBlock(
                values=np.empty((len(entries), 1)),
                samples=Labels.single(),
                components=[],
                properties=entries,
            )
        )

    keys = Labels(
        names=["center_type", "neighbor_1_type", "neighbor_2_type"],
        values=np.array([[1, 1, 1], [8, 8, 8]], dtype=np.int32),
    )

    selected_properties = TensorMap(keys, blocks)








.. GENERATED FROM PYTHON SOURCE LINES 113-115

Only one of the key from our ``selected_properties`` will be used in the
``selected_keys``, meaning the output will only contain this one key/block.

.. GENERATED FROM PYTHON SOURCE LINES 116-128

.. code-block:: Python


    selected_keys = Labels(
        names=["center_type", "neighbor_1_type", "neighbor_2_type"],
        values=np.array([[1, 1, 1]], dtype=np.int32),
    )

    descriptor = calculator.compute(
        frames,
        selected_properties=selected_properties,
        selected_keys=selected_keys,
    )








.. GENERATED FROM PYTHON SOURCE LINES 129-131

As expected, we get 1 block with values of the form (420, 1), i.e. with only 1
property.

.. GENERATED FROM PYTHON SOURCE LINES 132-136

.. code-block:: Python


    print(f"list of keys: {descriptor.keys}")
    print(descriptor.block(0).values.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    list of keys: Labels(
        center_type  neighbor_1_type  neighbor_2_type
             1              1                1
    )
    (420, 1)




.. GENERATED FROM PYTHON SOURCE LINES 137-138

.. end-body


.. _sphx_glr_download_examples_keys-selection.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: keys-selection.ipynb <keys-selection.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: keys-selection.py <keys-selection.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: keys-selection.zip <keys-selection.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
