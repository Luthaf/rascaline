
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/sample-selection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_sample-selection.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_sample-selection.py:


Sample Selection
================

.. start-body

.. GENERATED FROM PYTHON SOURCE LINES 7-15

.. code-block:: Python


    import chemfiles
    import numpy as np
    from metatensor import Labels

    from featomic import SoapPowerSpectrum









.. GENERATED FROM PYTHON SOURCE LINES 16-17

First we load the dataset with chemfiles

.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: Python


    with chemfiles.Trajectory("dataset.xyz") as trajectory:
        frames = [f for f in trajectory]








.. GENERATED FROM PYTHON SOURCE LINES 23-24

and define the hyper parameters of the representation

.. GENERATED FROM PYTHON SOURCE LINES 25-46

.. code-block:: Python


    HYPER_PARAMETERS = {
        "cutoff": {
            "radius": 5.0,
            "smoothing": {"type": "ShiftedCosine", "width": 0.5},
        },
        "density": {
            "type": "Gaussian",
            "width": 0.3,
        },
        "basis": {
            "type": "TensorProduct",
            "max_angular": 4,
            "radial": {"type": "Gto", "max_radial": 6},
        },
    }

    calculator = SoapPowerSpectrum(**HYPER_PARAMETERS)

    descriptor = calculator.compute(frames)








.. GENERATED FROM PYTHON SOURCE LINES 47-50

The selections for sample can be a set of ``Labels``, in which case the names
of the labels must be a subset of the names of the samples produced by the
calculator. You can see the default set of names with:

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python


    print("sample names:", descriptor.sample_names)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    sample names: ['system', 'atom']




.. GENERATED FROM PYTHON SOURCE LINES 55-58

We can use a subset of these names to define a selection. In this case, only
samples matching the labels in this selection will be used by featomic (here,
only atoms from system 0, 2, and 3)

.. GENERATED FROM PYTHON SOURCE LINES 59-74

.. code-block:: Python


    selection = Labels(
        names=["system"],
        values=np.array([[0], [2], [3]]),
    )

    descriptor_selected = calculator.compute(frames, selected_samples=selection)

    descriptor_selected = descriptor_selected.keys_to_samples("center_type")
    descriptor_selected = descriptor_selected.keys_to_properties(
        ["neighbor_1_type", "neighbor_2_type"]
    )

    samples = descriptor_selected.block().samples








.. GENERATED FROM PYTHON SOURCE LINES 75-76

The first block should have ``[0, 2, 3]`` as ``samples["system"]``

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: Python


    print(f"we have the following systems: {np.unique(samples['system'])}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    we have the following systems: [0 2 3]




.. GENERATED FROM PYTHON SOURCE LINES 81-84

If we want to select not only based on the system indexes but also atomic
indexes, we can do the following (here we select atom 0 in the first system
and atom 1 in the third system):

.. GENERATED FROM PYTHON SOURCE LINES 85-97

.. code-block:: Python


    selection = Labels(
        names=["system", "atom"],
        values=np.array([[0, 0], [2, 1]]),
    )

    descriptor_selected = calculator.compute(frames, selected_samples=selection)
    descriptor_selected = descriptor_selected.keys_to_samples("center_type")
    descriptor_selected = descriptor_selected.keys_to_properties(
        ["neighbor_1_type", "neighbor_2_type"]
    )








.. GENERATED FROM PYTHON SOURCE LINES 98-99

The values will have 2 rows, since we have two samples:

.. GENERATED FROM PYTHON SOURCE LINES 100-106

.. code-block:: Python


    print(
        "shape of first block of descriptor:",
        descriptor_selected.block(0).values.shape,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    shape of first block of descriptor: (2, 2450)




.. GENERATED FROM PYTHON SOURCE LINES 107-110

The previous selection method uses the same selection for all blocks. If you
can to use different selection for different blocks, you should use a
`TensorMap` to create your selection

.. GENERATED FROM PYTHON SOURCE LINES 111-115

.. code-block:: Python


    descriptor = calculator.compute(frames)
    descriptor_selected = calculator.compute(frames, selected_samples=selection)








.. GENERATED FROM PYTHON SOURCE LINES 116-117

notice how we are passing a TensorMap as the ``selected_samples`` argument:

.. GENERATED FROM PYTHON SOURCE LINES 118-124

.. code-block:: Python


    print(type(descriptor_selected))
    descriptor_for_comparison = calculator.compute(
        frames, selected_samples=descriptor_selected
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'metatensor.tensor.TensorMap'>




.. GENERATED FROM PYTHON SOURCE LINES 125-128

The descriptor had 420 samples stored in the first block,
the ``descriptor_selected`` had 0. So ``descriptor_for_comparison``
will also have 0 samples.

.. GENERATED FROM PYTHON SOURCE LINES 129-140

.. code-block:: Python


    print("shape of first block initially:", descriptor.block(0).values.shape)
    print(
        "shape of first block of reference:",
        descriptor_selected.block(0).values.shape,
    )
    print(
        "shape of first block after selection:",
        descriptor_for_comparison.block(0).values.shape,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    shape of first block initially: (420, 245)
    shape of first block of reference: (0, 245)
    shape of first block after selection: (0, 245)




.. GENERATED FROM PYTHON SOURCE LINES 141-142

.. end-body


.. _sphx_glr_download_examples_sample-selection.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: sample-selection.ipynb <sample-selection.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: sample-selection.py <sample-selection.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: sample-selection.zip <sample-selection.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
