
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/compute-soap.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_compute-soap.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_compute-soap.py:


Computing SOAP features
=======================

.. start-body

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: Python


    import chemfiles

    from featomic import SoapPowerSpectrum









.. GENERATED FROM PYTHON SOURCE LINES 14-16

Read systems using chemfiles. You can obtain the dataset used in this
example from our :download:`website <../../static/dataset.xyz>`.

.. GENERATED FROM PYTHON SOURCE LINES 17-21

.. code-block:: Python


    with chemfiles.Trajectory("dataset.xyz") as trajectory:
        systems = [s for s in trajectory]








.. GENERATED FROM PYTHON SOURCE LINES 22-28

Featomic can also handles systems read by `ASE
<https://wiki.fysik.dtu.dk/ase/>`_ using

``systems = ase.io.read("dataset.xyz", ":")``.

We can now define hyper parameters for the calculation

.. GENERATED FROM PYTHON SOURCE LINES 29-48

.. code-block:: Python


    HYPER_PARAMETERS = {
        "cutoff": {
            "radius": 5.0,
            "smoothing": {"type": "ShiftedCosine", "width": 0.5},
        },
        "density": {
            "type": "Gaussian",
            "width": 0.3,
        },
        "basis": {
            "type": "TensorProduct",
            "max_angular": 4,
            "radial": {"type": "Gto", "max_radial": 6},
        },
    }

    calculator = SoapPowerSpectrum(**HYPER_PARAMETERS)








.. GENERATED FROM PYTHON SOURCE LINES 49-50

And then run the actual calculation, including gradients with respect to positions

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python


    descriptor = calculator.compute(systems, gradients=["positions"])








.. GENERATED FROM PYTHON SOURCE LINES 55-59

The descriptor is a metatensor ``TensorMap``, containing multiple blocks. We
can transform it to a single block containing a dense representation, with one
sample for each atom-centered environment by using ``keys_to_samples`` and
``keys_to_properties``

.. GENERATED FROM PYTHON SOURCE LINES 60-67

.. code-block:: Python


    print("before: ", len(descriptor.keys))

    descriptor = descriptor.keys_to_samples("center_type")
    descriptor = descriptor.keys_to_properties(["neighbor_1_type", "neighbor_2_type"])
    print("after: ", len(descriptor.keys))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    before:  40
    after:  1




.. GENERATED FROM PYTHON SOURCE LINES 68-70

you can now use ``descriptor.block().values`` as the input of a machine
learning algorithm

.. GENERATED FROM PYTHON SOURCE LINES 71-75

.. code-block:: Python


    print(descriptor.block().values.shape)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (1380, 2450)




.. GENERATED FROM PYTHON SOURCE LINES 76-77

.. end-body


.. _sphx_glr_download_examples_compute-soap.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: compute-soap.ipynb <compute-soap.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: compute-soap.py <compute-soap.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: compute-soap.zip <compute-soap.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
