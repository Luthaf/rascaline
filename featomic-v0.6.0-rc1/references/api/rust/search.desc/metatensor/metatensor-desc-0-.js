searchState.loadedDescShard("metatensor", 0, "Metatensor\nThe Array trait is used by metatensor to manage different …\nReference to a data array in metatensor-core\nMutable reference to a data array in metatensor-core\nAn implementation of the <code>Array</code> trait without any data.\nError type used in metatensor\nIterator over parameter/<code>TensorBlockRef</code> pairs for all …\nIterator over parameter/<code>TensorBlockRefMut</code> pairs for all …\nA single value inside a label.\nA set of labels used to carry metadata associated with a …\nBuilder for <code>Labels</code>\nIterator over entries in a set of <code>Labels</code> as fixed size …\nIterator over <code>Labels</code> entries\nParallel iterator over entries in a set of <code>Labels</code>\nLazily accessed metadata inside a <code>TensorBlock</code>\nA single block, containing both values &amp; optionally …\nAll the basic data in a <code>TensorBlockRef</code> as a struct with …\nAll the basic data in a <code>TensorBlockRefMut</code> as a struct with …\nReference to a <code>TensorBlock</code>\nMutable reference to a <code>TensorBlock</code>\n<code>TensorMap</code> is the main user-facing struct of this library, …\nIterator over key/block pairs in a <code>TensorMap</code>\nIterator over key/block pairs in a <code>TensorMap</code>, with mutable …\nParallel iterator over key/block pairs in a <code>TensorMap</code>\nParallel iterator over key/block pairs in a <code>TensorMap</code>, …\nAdd a single <code>entry</code> to this set of labels.\nAdd a gradient with respect to <code>parameter</code> to this block.\nGet the array as a <code>Any</code> reference\nGet the underlying array as an <code>&amp;dyn Any</code> instance.\nGet the underlying array as an <code>&amp;dyn Any</code> instance.\nGet the array as a mutable <code>Any</code> reference\nGet the underlying array as an <code>&amp;mut dyn Any</code> instance.\nGet the data in this <code>ArrayRef</code> as a <code>ndarray::ArrayD</code>. This …\nGet the data in this <code>ArrayRef</code> as a <code>ndarray::ArrayD</code>. This …\nGet the data in this <code>ArrayRef</code> as a mutable reference to an …\nGet the raw underlying <code>mts_array_t</code>\nGet the raw underlying <code>mts_array_t</code>\nGet a mutable reference to the raw underlying <code>mts_array_t</code>\nGet a non mutable reference to this block\nGet a non mutable reference to this block\nGet a non mutable reference to this block\nGet a reference to the block matching the given selection.\nGet a reference to the block at the given <code>index</code> in this …\nGet the index of the single block matching the given …\nGet a mutable reference to the block at the given <code>index</code> in …\nGet a reference to every blocks in this <code>TensorMap</code>\nGet the index of blocks matching the given selection.\nGet a mutable reference to every blocks in this <code>TensorMap</code>\nError code from the metatensor-core C API\nGet the components for this block\nGet the components for this block\nGet the components for this block\nMove the given dimensions from the component labels to the …\nCheck whether the given <code>label</code> is part of this set of labels\nMake a copy of this <code>array</code>\nGet the total number of entries in this set of labels\nCreate a new array with the same options as the current …\nGet the underlying data storage as a contiguous slice\nGet all the data and metadata inside this <code>TensorBlockRef</code> …\nGet all the data and metadata inside this <code>TensorBlockRefMut</code>…\nCreate a set of <code>Labels</code> with the given names, containing no …\nFinish building the <code>Labels</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new set of <code>Labels</code> from a raw <code>mts_labels_t</code>.\nCreate a new <code>TensorMap</code> from a raw pointer.\nCreate a new <code>ArrayRef</code> from the given raw <code>mts_array_t</code>\nGet the data and metadata for the gradient with respect to …\nGet the full list of gradients in this block\nGet a mutable reference to the data and metadata for the …\nGet an iterator over parameter/<code>TensorBlockRef</code> pairs for …\nGet an iterator over parameter/<code>TensorBlockRefMut</code> pairs for …\nGet the integer value of this <code>LabelValue</code> as an i32\nTake the intersection of self with <code>other</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the underlying raw pointer.\nInput/Output facilities for storing <code>crate::TensorMap</code> and …\nCheck if this set of Labels is empty (contains no entry)\nGet the integer value of this <code>LabelValue</code> as an isize\nIterate over the entries in this set of labels\nGet an iterator over the keys and associated blocks\nIterate over the entries in this set of labels as …\nGet an iterator over the keys and associated blocks, with …\nGet the keys defined in this <code>TensorMap</code>\nMerge blocks with the same value for selected keys …\nMerge blocks with the same value for selected keys …\nLoad <code>Labels</code> from the file at <code>path</code>\nLoad a <code>TensorMap</code> from the file at <code>path</code>\nLoad a <code>TensorBlock</code> from the file at <code>path</code>\nLoad a <code>TensorMap</code> from an in-memory buffer\nLoad a <code>TensorMap</code> from an in-memory buffer\nLoad a <code>TensorBlock</code> from an in-memory buffer\nError message associated with the code\nSet entries in <code>self</code> taking data from the <code>input</code> array.\nGet the names of the entries/columns in this set of labels\nCreate a new set of Labels with the given names and values.\nCreate a new <code>LazyMetadata</code> with the given initialization …\nCreate a new <code>TensorMap</code> with the given keys and blocks.\nCreate a new <code>ArrayRefMut</code> from the given raw <code>mts_array_t</code>\nCreate a new <code>EmptyArray</code> with the given shape.\nCreate a <code>LabelValue</code> with the given <code>value</code>\nCreate a new empty <code>LabelsBuilder</code> with the given <code>names</code>\nCreate a new <code>TensorBlock</code> containing the given data, …\nIterate over the entries in this set of labels in parallel\nGet a parallel iterator over the keys and associated blocks\nGet a parallel iterator over the keys and associated …\nGet the position (i.e. row index) of the given label in …\nGet the properties for this block\nGet the properties for this block\nGet the properties for this block\nReserve space for <code>additional</code> other entries in the labels.\nChange the shape of the array to the given <code>shape</code>\nGet the samples for this block\nGet the samples for this block\nGet the samples for this block\nSave the given tensor to the file at <code>path</code>\nSave the given tensor to the file at <code>path</code>\nSave the given block to the file at <code>path</code>\nSave the given block to the file at <code>path</code>\nSave the given block to the file at <code>path</code>\nSave the given tensor to an in-memory buffer\nSave the given tensor to an in-memory buffer\nSave the given block to an in-memory buffer\nSave the given block to an in-memory buffer\nSave the given block to an in-memory buffer\nSelect entries in these <code>Labels</code> that match the <code>selection</code>.\nGet the shape of the array\nCreate a set of <code>Labels</code> containing a single entry, to be …\nGet the number of entries/named values in a single label\nGet the number of labels in a single value\nSwap the axes <code>axis_1</code> and <code>axis_2</code> in this array\nGet a reference to the underlying array as an <code>&amp;dyn Any</code> …\nGet the underlying array as an <code>&amp;dyn Any</code> instance, re-using …\nGet the underlying array as an <code>&amp;mut dyn Any</code> instance, …\nTransform this <code>ArrayRef</code> into a reference to an …\nTransform this <code>ArrayRefMut</code> into a reference to an …\nTransform this <code>ArrayRefMut</code> into a mutable reference to an …\nClone this <code>TensorMap</code>, cloning all the data and metadata …\nClone this block, cloning all the data and metadata …\nTake the union of <code>self</code> with <code>other</code>.\nGet the integer value of this <code>LabelValue</code> as a usize\nGet the array for the values in this block\nGet the array for the values in this block\nGet the array for the values in this block\nGet a mutable reference to the values in this block\nError type used in metatensor\nStorage for the last error coming from a Rust function\nCheck a pointer allocated by metatensor-core, returning an …\nCheck an <code>mts_status_t</code>, returning an error if is it not …\nError code from the metatensor-core C API\nError message associated with the code\nLoad the serialized tensor map from the given path.\nLoad previously saved <code>TensorBlock</code> from the file at the …\nLoad a serialized <code>TensorBlock</code> from a <code>buffer</code>.\nLoad a serialized <code>TensorMap</code> from a <code>buffer</code>.\nLoad previously saved <code>Labels</code> from the file at the given …\nLoad previously saved <code>Labels</code> from an in-memory <code>buffer</code>.\nSave the given tensor to a file.\nSave the given <code>block</code> to a file.\nSave the given <code>block</code> to an in-memory <code>buffer</code>.\nSave the given <code>tensor</code> to an in-memory <code>buffer</code>.\nSave the given <code>Labels</code> to a file.\nSave the given <code>labels</code> to an in-memory <code>buffer</code>.")