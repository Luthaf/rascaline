name: Build Python wheels

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    # Check all PR

concurrency:
  group: wheels-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  FEATOMIC_NO_LOCAL_DEPS: "1"

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: x86_64 Linux
            os: ubuntu-22.04
            rust-target: x86_64-unknown-linux-gnu
            cibw_arch: x86_64
          - name: x86_64 macOS
            os: macos-13
            rust-target: x86_64-apple-darwin
            cibw_arch: x86_64
          - name: M1 macOS
            os: macos-14
            rust-target: aarch64-apple-darwin
            cibw_arch: arm64
          - name: x86_64 Windows
            os: windows-2019
            # TODO: add a 32-bit windows builder?
            rust-target: x86_64-pc-windows-msvc
            cibw_arch: AMD64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.rust-target }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: install dependencies
        run: python -m pip install cibuildwheel

      - name: build manylinux with rust docker image
        if: matrix.os == 'ubuntu-22.04'
        run: docker build -t rustc-manylinux2014_x86_64 python/scripts/rustc-manylinux2014_x86_64

      - name: build featomic wheel
        run: python -m cibuildwheel python/featomic
        env:
          CIBW_BUILD: cp310-*
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_MANYLINUX_X86_64_IMAGE: rustc-manylinux2014_x86_64
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --ignore-missing-dependencies --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair --exclude libmetatensor.so -w {dest_dir} {wheel}"
          CIBW_ENVIRONMENT: >
            MACOSX_DEPLOYMENT_TARGET=11
            FEATOMIC_NO_LOCAL_DEPS=1

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl
      - name: upload wheel to GitHub release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./wheelhouse/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-other:
    runs-on: ubuntu-22.04
    name: sdist
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: build featomic sdist
        run: |
          pip install build
          python -m build --sdist python/featomic

      - name: create C++ tarballs
        run: |
          ./scripts/package-featomic.sh dist/cxx/
          ./scripts/package-featomic-torch.sh dist/cxx/

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: |
            dist/*.tar.gz
            dist/cxx/*.tar.gz

      - name: upload sdist to GitHub release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
            dist/cxx/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
